package Graphics;

import javax.swing.JOptionPane;
import Metier.ConsulterCompteR;
import Metier.MethodesRest;
//import Metier.MethodesRest;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.google.gson.JsonParser;
import com.google.gson.reflect.TypeToken;
import java.util.HashMap;

/**
 *
 * @author pauline
 */
public class ConsulterCompte extends javax.swing.JPanel {

    private int idCompteCourant;
    private int idCompteEpargne;
    private String bloqueCompteCourant;
    private String bloqueCompteEpargne;
    private ConsulterCompteR con;
    //private  ConsulterCompteR con;

    /**
     * Creates new form ConsulterCompteR
     */
    public ConsulterCompte() {
        con = new ConsulterCompteR();
        initComponents();

        supprimer.setEnabled(false);
        crediter.setEnabled(false);
        debiter.setEnabled(false);
        bloque.setEnabled(false);
        courant.setEnabled(false);
        epargne.setEnabled(false);
        //con = new ConsulterCompteR();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        numeroClient = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        compteCourant = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        compteEpargne = new javax.swing.JLabel();
        crediter = new javax.swing.JButton();
        supprimer = new javax.swing.JButton();
        rechercher = new javax.swing.JButton();
        debiter = new javax.swing.JButton();
        courant = new javax.swing.JRadioButton();
        epargne = new javax.swing.JRadioButton();
        bloque = new javax.swing.JButton();

        jLabel1.setText("Numéro de Client :");

        jLabel2.setText("Compte courant :");

        jLabel3.setText("Compte epargne :");

        crediter.setText("Créditer le compte");
        crediter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crediterActionPerformed(evt);
            }
        });

        supprimer.setText("Supprimer le Compte");
        supprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supprimerActionPerformed(evt);
            }
        });

        rechercher.setText("Rechercher");
        rechercher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rechercherActionPerformed(evt);
            }
        });

        debiter.setText("Débiter le compte");
        debiter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                debiterActionPerformed(evt);
            }
        });

        buttonGroup1.add(courant);
        courant.setText("Courant");
        courant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                courantActionPerformed(evt);
            }
        });

        buttonGroup1.add(epargne);
        epargne.setText("Epargne");
        epargne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                epargneActionPerformed(evt);
            }
        });

        bloque.setText("Bloquer le compte");
        bloque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bloqueActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(70, 70, 70)
                                .addComponent(crediter))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(courant)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(epargne)
                            .addComponent(debiter)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(135, 135, 135)
                        .addComponent(supprimer))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(144, 144, 144)
                        .addComponent(bloque))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(numeroClient, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rechercher))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(compteEpargne, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(compteCourant, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)))))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(numeroClient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(rechercher))
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(compteCourant, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(compteEpargne, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(epargne)
                    .addComponent(courant))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(crediter)
                    .addComponent(debiter))
                .addGap(18, 18, 18)
                .addComponent(bloque)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addComponent(supprimer)
                .addGap(62, 62, 62))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void supprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supprimerActionPerformed
        if (!courant.isSelected() && !epargne.isSelected()) {
            JOptionPane.showMessageDialog(this, "Merci de séléctionner un compte", "Alerte", JOptionPane.ERROR_MESSAGE);
        } else if (numeroClient.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Aucun compte à supprimer", "Alerte", JOptionPane.ERROR_MESSAGE);
        } else {
            JOptionPane jop = new JOptionPane();
            int option = jop.showConfirmDialog(this, "Voulez-vous vraiment supprimer ce compte?", "", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (option == JOptionPane.OK_OPTION) {
                if (courant.isSelected()) {
                    con.supprimerCompteCourant(idCompteCourant);
                }
                if (epargne.isSelected()) {
                    con.supprimerCompteEpargne(idCompteEpargne);
                }

                this.rechercherActionPerformed(evt);
            }
        }
    }//GEN-LAST:event_supprimerActionPerformed

    private void rechercherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rechercherActionPerformed
        courant.setEnabled(true);
        epargne.setEnabled(true);
        buttonGroup1.clearSelection();

        Gson gson = new Gson();
        // try {
        int idClient = Integer.parseInt(numeroClient.getText());

        String reponse = con.consulterClientGet(idClient);

        if (reponse.equals("KO")) {
            JOptionPane.showMessageDialog(this, "Ce client n'existe pas", "Alerte", JOptionPane.ERROR_MESSAGE);
            numeroClient.setText("");
            compteCourant.setText("");
            compteEpargne.setText("");
        } else {
            String ccourant = con.consulterCompteCourantClient(idClient);
            JsonElement rootc = new JsonParser().parse(ccourant);
            if (ccourant.equals("KO")) {
                compteCourant.setText("Pas de compte courant");
                courant.setEnabled(false);
            } else {
                HashMap<String, String> args = gson.fromJson(ccourant, new TypeToken<HashMap<String, String>>() {
                }.getType());
                compteCourant.setText(args.get("montant"));
                idCompteCourant = Integer.parseInt(args.get("compteCourantId"));
                bloqueCompteCourant = args.get("bloque");
            }
            String cepargne = con.consulterCompteEpargneClient(idClient);
            if (cepargne.equals("KO")) {
                compteEpargne.setText("Pas de compte epargne");
                epargne.setEnabled(false);
            } else {
                HashMap<String, String> args = gson.fromJson(cepargne, new TypeToken<HashMap<String, String>>() {
                }.getType());
                compteEpargne.setText(args.get("montant"));
                idCompteEpargne = Integer.parseInt(args.get("compteEpargneId"));
                bloqueCompteEpargne = args.get("bloque");
            }
        }
        // } catch (Exception e) {
        //   JOptionPane.showMessageDialog(this, "Entrée invalide", "Alerte", JOptionPane.ERROR_MESSAGE);
        // numeroClient.setText("");
        //}
    }//GEN-LAST:event_rechercherActionPerformed

    private void crediterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crediterActionPerformed
        if (!courant.isSelected() && !epargne.isSelected()) {
            JOptionPane.showMessageDialog(this, "Merci de séléctionner un compte", "Alerte", JOptionPane.ERROR_MESSAGE);
        } else if (numeroClient.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Aucun compte à créditer", "Alerte", JOptionPane.ERROR_MESSAGE);
        } else {
            JOptionPane jop1 = new JOptionPane();
            int somme;
            String sommeTransaction = JOptionPane.showInputDialog(this, "somme à créditer", "Crédit");
            if (sommeTransaction != null) {
                somme = Integer.parseInt(sommeTransaction);
                if (courant.isSelected()) {
                    con.crediterCompteCourant(somme, idCompteCourant);
                }
                if (epargne.isSelected()) {
                    con.crediterCompteEpargne(somme, idCompteEpargne);
                }

            }
        }
        this.rechercherActionPerformed(evt);
    }//GEN-LAST:event_crediterActionPerformed

    private void debiterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_debiterActionPerformed
        if (!courant.isSelected() && !epargne.isSelected()) {
            JOptionPane.showMessageDialog(this, "Merci de séléctionner un compte", "Alerte", JOptionPane.ERROR_MESSAGE);
        } else if (numeroClient.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Aucun compte à débiter", "Alerte", JOptionPane.ERROR_MESSAGE);
        } else {

            JOptionPane jop1 = new JOptionPane();
            int somme;
            String sommeTransaction = JOptionPane.showInputDialog(this, "somme à débiter", "Débit");
            if (sommeTransaction != null) {
                somme = Integer.parseInt(sommeTransaction);
                if (courant.isSelected()) {
                    con.debiterCompteCourant(somme, idCompteCourant);
                }
                if (epargne.isSelected()) {
                    con.crediterCompteEpargne(somme, idCompteEpargne);
                }
            }
        }
        this.rechercherActionPerformed(evt);
    }//GEN-LAST:event_debiterActionPerformed

    private void courantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_courantActionPerformed
        if (courant.isSelected() && bloqueCompteCourant.equals("false")) {
            bloque.setEnabled(true);
            bloque.setText("Bloquer");
            supprimer.setEnabled(true);
            crediter.setEnabled(true);
            debiter.setEnabled(true);
        } else if (courant.isSelected() && bloqueCompteCourant.equals("true")) {
            bloque.setEnabled(true);
            bloque.setText("Débloquer");
            supprimer.setEnabled(true);
            crediter.setEnabled(false);
            debiter.setEnabled(false);
        }
    }//GEN-LAST:event_courantActionPerformed

    private void epargneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_epargneActionPerformed
        if (epargne.isSelected() && bloqueCompteEpargne.equals("false")) {
            bloque.setEnabled(true);
            bloque.setText("Bloquer");
            supprimer.setEnabled(true);
            crediter.setEnabled(true);
            debiter.setEnabled(true);
        } else if (epargne.isSelected() && bloqueCompteEpargne.equals("true")) {
            bloque.setEnabled(true);
            bloque.setText("Débloquer");
            supprimer.setEnabled(true);
            crediter.setEnabled(false);
            debiter.setEnabled(false);
        }
    }//GEN-LAST:event_epargneActionPerformed

    private void bloqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bloqueActionPerformed
        if (!courant.isSelected() && !epargne.isSelected()) {
            JOptionPane.showMessageDialog(this, "Merci de séléctionner un compte", "Alerte", JOptionPane.ERROR_MESSAGE);
        } else if (courant.isSelected()) {
            con.bloquerDebloquer(idCompteCourant, "courant");
            this.rechercherActionPerformed(evt);
            this.courantActionPerformed(evt);
        } else if (epargne.isSelected()) {
            con.bloquerDebloquer(idCompteEpargne, "epargne");
            this.rechercherActionPerformed(evt);
            this.epargneActionPerformed(evt);
        }
        this.rechercherActionPerformed(evt);

    }//GEN-LAST:event_bloqueActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bloque;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel compteCourant;
    private javax.swing.JLabel compteEpargne;
    private javax.swing.JRadioButton courant;
    private javax.swing.JButton crediter;
    private javax.swing.JButton debiter;
    private javax.swing.JRadioButton epargne;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField numeroClient;
    private javax.swing.JButton rechercher;
    private javax.swing.JButton supprimer;
    // End of variables declaration//GEN-END:variables
}
